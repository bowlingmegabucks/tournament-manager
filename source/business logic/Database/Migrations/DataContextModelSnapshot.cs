// <auto-generated />
using System;
using BowlingMegabucks.TournamentManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BowlingMegabucks.TournamentManager.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Bowler", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("CityAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleInitial")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StateAddress")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("USBCId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Bowlers");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("HandicapBase")
                        .HasColumnType("int");

                    b.Property<decimal?>("HandicapPercentage")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<short?>("MaximumAge")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaximumAverage")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumHandicapPerGame")
                        .HasColumnType("int");

                    b.Property<short?>("MinimumAge")
                        .HasColumnType("smallint");

                    b.Property<int?>("MinimumAverage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Average")
                        .HasColumnType("int");

                    b.Property<Guid>("BowlerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("SuperSweeper")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("BowlerId", "DivisionId")
                        .IsUnique();

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CashRatio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<bool>("Complete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("MaxPerPair")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberOfLanes")
                        .HasColumnType("smallint");

                    b.Property<int>("SquadType")
                        .HasColumnType("int");

                    b.Property<short>("StartingLane")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Squads", (string)null);

                    b.HasDiscriminator<int>("SquadType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SquadRegistration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LaneAssignment")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasKey("RegistrationId", "SquadId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadRegistration");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SquadScore", b =>
                {
                    b.Property<Guid>("BowlerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("char(36)");

                    b.Property<short>("Game")
                        .HasColumnType("smallint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("BowlerId", "SquadId", "Game");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadScores");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SweeperDivision", b =>
                {
                    b.Property<Guid>("SweeperId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("BonusPinsPerGame")
                        .HasColumnType("int");

                    b.HasKey("SweeperId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("SweeperDivision");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("BowlingCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("CashRatio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("EntryFee")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FinalsRatio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<short>("Games")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("SuperSweperCashRatio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SweeperSquad", b =>
                {
                    b.HasBaseType("BowlingMegabucks.TournamentManager.Database.Entities.Squad");

                    b.Property<decimal>("EntryFee")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("SweeperEntryFee");

                    b.Property<short>("Games")
                        .HasColumnType("smallint");

                    b.HasIndex("TournamentId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.TournamentSquad", b =>
                {
                    b.HasBaseType("BowlingMegabucks.TournamentManager.Database.Entities.Squad");

                    b.Property<decimal?>("EntryFee")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("SquadEntryFee");

                    b.Property<decimal?>("FinalsRatio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasIndex("TournamentId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Division", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Tournament", "Tournament")
                        .WithMany("Divisions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Registration", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Bowler", "Bowler")
                        .WithMany("Registrations")
                        .HasForeignKey("BowlerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Division", "Division")
                        .WithMany("Registrations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bowler");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SquadRegistration", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Registration", "Registration")
                        .WithMany("Squads")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Squad", "Squad")
                        .WithMany("Registrations")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SquadScore", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Bowler", "Bowler")
                        .WithMany("SquadScores")
                        .HasForeignKey("BowlerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Squad", "Squad")
                        .WithMany("Scores")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bowler");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SweeperDivision", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Division", "Division")
                        .WithMany("Sweepers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.SweeperSquad", "Sweeper")
                        .WithMany("Divisions")
                        .HasForeignKey("SweeperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Sweeper");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SweeperSquad", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Tournament", "Tournament")
                        .WithMany("Sweepers")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.TournamentSquad", b =>
                {
                    b.HasOne("BowlingMegabucks.TournamentManager.Database.Entities.Tournament", "Tournament")
                        .WithMany("Squads")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Bowler", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("SquadScores");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Division", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Sweepers");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Registration", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Squad", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.Tournament", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Squads");

                    b.Navigation("Sweepers");
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Database.Entities.SweeperSquad", b =>
                {
                    b.Navigation("Divisions");
                });
#pragma warning restore 612, 618
        }
    }
}
