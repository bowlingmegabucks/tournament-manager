// <auto-generated />
using System;
using BowlingMegabucks.TournamentManager.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BowlingMegabucks.TournamentManager.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250827172403_TournamentEntity")]
    partial class TournamentEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Domain.Tournaments.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Unique identifier for the tournament");

                    b.Property<string>("BowlingCenter")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasComment("Bowling center hosting the tournament");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Indicates if the tournament is completed");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("UTC timestamp when entity was created");

                    b.Property<decimal>("EntryFee")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Entry fee for the tournament");

                    b.Property<short>("Games")
                        .HasColumnType("smallint")
                        .HasComment("Number of games during qualifying in the tournament");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasComment("Name of the tournament");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("UTC timestamp when entity was last updated");

                    b.HasKey("Id");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("BowlingMegabucks.TournamentManager.Domain.Tournaments.Tournament", b =>
                {
                    b.OwnsOne("BowlingMegabucks.TournamentManager.Domain.DateOnlyRange", "TournamentDates", b1 =>
                        {
                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("char(36)");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate")
                                .HasComment("End date of the tournament");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate")
                                .HasComment("Start date of the tournament");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.OwnsOne("BowlingMegabucks.TournamentManager.Domain.Tournaments.Ratio", "CashRatio", b1 =>
                        {
                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Value")
                                .HasPrecision(3, 1)
                                .HasColumnType("decimal(3,1)")
                                .HasColumnName("CashRatio")
                                .HasComment("Cash ratio for the tournament");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.OwnsOne("BowlingMegabucks.TournamentManager.Domain.Tournaments.Ratio", "FinalsRatio", b1 =>
                        {
                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Value")
                                .HasPrecision(3, 1)
                                .HasColumnType("decimal(3,1)")
                                .HasColumnName("FinalsRatio")
                                .HasComment("Finals ratio for the tournament");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.Navigation("CashRatio")
                        .IsRequired();

                    b.Navigation("FinalsRatio")
                        .IsRequired();

                    b.Navigation("TournamentDates")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
